services:
  redis:
    image: redis:7-alpine
    container_name: investigator_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - investigator_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: investigator_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]  # Simple health check that always passes
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - investigator_network

  # InvestigatorAI API Backend
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: investigator_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database connections
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      
      # API Keys (set these in your .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_SEARCH_API_KEY=${TAVILY_SEARCH_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      # Note: Exchange rates now use local JSON data file instead of API
      
      # LangSmith Configuration
      - LANGSMITH_TRACING=${LANGSMITH_TRACING:-true}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT:-InvestigatorAI-Docker}
      - LANGSMITH_ENDPOINT=https://api.smith.langchain.com
      
      # Performance Settings
      - DEFAULT_RETRIEVAL_METHOD=auto
      - ENABLE_PERFORMANCE_LOGGING=true
      - BM25_ENABLED=true
      
      # Cache and other settings
      - CACHE_ENABLED=true
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data:ro
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - investigator_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InvestigatorAI Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: investigator_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      api:
        condition: service_healthy
    networks:
      - investigator_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis Commander for Redis management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: investigator_redis_ui
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - investigator_network
    profiles:
      - ui

volumes:
  redis_data:
    driver: local
  qdrant_storage:
    driver: local

networks:
  investigator_network:
    driver: bridge